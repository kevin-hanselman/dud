// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	agglog "github.com/kevin-hanselman/dud/src/agglog"
	artifact "github.com/kevin-hanselman/dud/src/artifact"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/cheggaaa/pb/v3"

	strategy "github.com/kevin-hanselman/dud/src/strategy"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: workDir, art, s, p
func (_m *Cache) Checkout(workDir string, art artifact.Artifact, s strategy.CheckoutStrategy, p *pb.ProgressBar) error {
	ret := _m.Called(workDir, art, s, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, artifact.Artifact, strategy.CheckoutStrategy, *pb.ProgressBar) error); ok {
		r0 = rf(workDir, art, s, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: workDir, art, s, l
func (_m *Cache) Commit(workDir string, art *artifact.Artifact, s strategy.CheckoutStrategy, l *agglog.AggLogger) error {
	ret := _m.Called(workDir, art, s, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *artifact.Artifact, strategy.CheckoutStrategy, *agglog.AggLogger) error); ok {
		r0 = rf(workDir, art, s, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: remoteSrc, arts
func (_m *Cache) Fetch(remoteSrc string, arts ...artifact.Artifact) error {
	_va := make([]interface{}, len(arts))
	for _i := range arts {
		_va[_i] = arts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, remoteSrc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...artifact.Artifact) error); ok {
		r0 = rf(remoteSrc, arts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: workDir, remoteDst, art
func (_m *Cache) Push(workDir string, remoteDst string, art artifact.Artifact) error {
	ret := _m.Called(workDir, remoteDst, art)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, artifact.Artifact) error); ok {
		r0 = rf(workDir, remoteDst, art)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: workDir, art
func (_m *Cache) Status(workDir string, art artifact.Artifact) (artifact.Status, error) {
	ret := _m.Called(workDir, art)

	var r0 artifact.Status
	if rf, ok := ret.Get(0).(func(string, artifact.Artifact) artifact.Status); ok {
		r0 = rf(workDir, art)
	} else {
		r0 = ret.Get(0).(artifact.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, artifact.Artifact) error); ok {
		r1 = rf(workDir, art)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
